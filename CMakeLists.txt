CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(VLE CXX C)
ENABLE_TESTING()

SET(VLE_MAJOR 1)
SET(VLE_MINOR 0)
SET(VLE_PATCH 3)
SET(VLE_EXTRA "")
SET(VLE_VERSION "${VLE_MAJOR}.${VLE_MINOR}.${VLE_PATCH}")
SET(VLE_VERSION_SHORT "${VLE_MAJOR}.${VLE_MINOR}")
SET(VLE_NAME "vle")
SET(VLE_NAME_VERSION "${VLE_NAME}-${VLE_VERSION}")
SET(VLE_LOCALE_NAME "${VLE_NAME}-${VLE_MAJOR}-${VLE_MINOR}")
IF ("${VLE_EXTRA}" STREQUAL "")
  SET(VLE_COMPLETE "${VLE_MAJOR}.${VLE_MINOR}.${VLE_PATCH}")
ELSE ("${VLE_EXTRA}" STREQUAL "")
  SET(VLE_COMPLETE "${VLE_MAJOR}.${VLE_MINOR}.${VLE_PATCH}-${VLE_EXTRA}")
ENDIF ("${VLE_EXTRA}" STREQUAL "")
SET(VLE_NAME_COMPLETE "${VLE_NAME}-${VLE_COMPLETE}")

#
 # Installation variables
#

SET(VLE_LIBRARY_DIRS "lib/vle-${VLE_VERSION_SHORT}")
SET(VLE_INCLUDE_DIRS "include/vle-${VLE_VERSION_SHORT}/vle")
SET(VLE_INCLUDE_DIR "include/vle-${VLE_VERSION_SHORT}")
SET(VLE_MANPAGE_PATH "share/man/man1")
SET(VLE_SHARE_DIRS "share/vle-${VLE_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET (VLE_LIBRARY_PROPERTIES VERSION 0)
SET (VLE_APP_PROPERTIES SOVERSION "${VLE_MAJOR}.${VLE_MINOR}" VERSION
  "${VLE_MAJOR}.${VLE_MINOR}")

#
 # CPack configuration
#

INCLUDE(CMakeCPack.cmake)

#
 # Debug mode
#

IF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
  IF (UNIX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
  ENDIF (UNIX)
ENDIF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)

#
# Manage the Win32 port. TODO mingw32 port
#

IF (WIN32)
  SET(OS_SPECIFIC_LIBRARIES -shared-libgcc wsock32 netapi32)
ELSE (WIN32)
  SET(OS_SPECIFIC_LIBRARIES)
ENDIF (WIN32)

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

FIND_PACKAGE(PkgConfig REQUIRED)

# FIXME use old-style link directories for now
IF (COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 OLD)
ENDIF (COMMAND CMAKE_POLICY)

PKG_CHECK_MODULES(GLIBMM REQUIRED glibmm-2.4)
PKG_CHECK_MODULES(GTHREAD REQUIRED gthread-2.0)
PKG_CHECK_MODULES(LIBXML REQUIRED libxml-2.0)
PKG_CHECK_MODULES(MODULE REQUIRED gmodule-2.0)
PKG_CHECK_MODULES(CAIROMM cairomm-1.0>=1.2)
PKG_CHECK_MODULES(GTKMM gtkmm-2.4)
IF (NOT WIN32)
  PKG_CHECK_MODULES(GTKSOURCEVIEWMM gtksourceviewmm-2.0)
ENDIF (NOT WIN32)

OPTION(WITH_CAIRO "use the cairomm to build output plugin [default: on]" ON)
IF (WITH_CAIRO AND CAIROMM_FOUND)
    SET(VLE_HAVE_CAIRO 1 CACHE INTERNAL "" FORCE)
ELSE (WITH_CAIRO AND CAIROMM_FOUND)
    SET(VLE_HAVE_CAIRO 0 CACHE INTERNAL "" FORCE)
ENDIF (WITH_CAIRO AND CAIROMM_FOUND)

OPTION(WITH_EOV "use the gtkmm and cairo to build eov [default: on]" ON)
IF (WITH_EOV AND GTKMM_FOUND AND VLE_HAVE_CAIRO)
  SET(HAVE_EOV 1 CACHE INTERNAL "" FORCE)
ELSE (WITH_EOV AND GTKMM_FOUND AND VLE_HAVE_CAIRO)
  SET(HAVE_EOV 0 CACHE INTERNAL "" FORCE)
ENDIF (WITH_EOV AND GTKMM_FOUND AND VLE_HAVE_CAIRO)

OPTION(WITH_GVLE "use the gtkmm to build gvle [default: on]" ON)
IF (WITH_GVLE AND GTKMM_FOUND)
  SET(HAVE_GVLE 1 CACHE INTERNAL "" FORCE)
ELSE (WITH_GVLE AND GTKMM_FOUND)
  SET(HAVE_GVLE 0 CACHE INTERNAL "" FORCE)
ENDIF (WITH_GVLE AND GTKMM_FOUND)

IF (WITH_GVLE AND GTKSOURCEVIEWMM_FOUND)
   SET(VLE_HAVE_GTKSOURCEVIEWMM 1 CACHE INTERNAL "" FORCE)
ELSE (WITH_GVLE AND GTKSOURCEVIEWMM_FOUND)
   SET(VLE_HAVE_GTKSOURCEVIEWMM 0 CACHE INTERNAL "" FORCE)
ENDIF (WITH_GVLE AND GTKSOURCEVIEWMM_FOUND)

#
 # Test the libboost header and libboost-text library.
#

OPTION(WITH_TEST "use the libboost test unit library [default: on]" ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_NO_SYSTEM_PATHS OFF)
SET(Boost_USE_STATIC_RUNTIME ON)
IF (WIN32)
  SET(Boost_THREADAPI "win32")
ENDIF (WIN32)
SET(Boost_DETAILED_FAILURE_MSG FALSE)
SET(Boost_DEBUG FALSE)

FIND_PACKAGE(Boost COMPONENTS unit_test_framework serialization filesystem
  system date_time regex thread)
IF (NOT Boost_SERIALIZATION_FOUND)
  MESSAGE(FATAL_ERROR "The boost serialization library is required")
ENDIF (NOT Boost_SERIALIZATION_FOUND)
IF (NOT Boost_FILESYSTEM_FOUND)
  MESSAGE(FATAL_ERROR "The boost filesystem library is required")
ENDIF (NOT Boost_FILESYSTEM_FOUND)
IF (NOT Boost_REGEX_FOUND)
  MESSAGE(FATAL_ERROR "The boost regex library is required")
ENDIF (NOT Boost_REGEX_FOUND)
IF (NOT Boost_DATE_TIME_FOUND)
  MESSAGE(FATAL_ERROR "The boost date_time library is required")
ENDIF (NOT Boost_DATE_TIME_FOUND)
IF (NOT Boost_THREAD_FOUND)
  MESSAGE(FATAL_ERROR "The boost thread library is required")
ENDIF (NOT Boost_THREAD_FOUND)
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
  SET(Boost_SYSTEM_LIBRARY "")
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(VLE_HAVE_BOOST_SPIRIT2 0 CACHE INTERNAL "" FORCE)
ELSE (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(VLE_HAVE_BOOST_SPIRIT2 1 CACHE INTERNAL "" FORCE)
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
IF (WITH_TEST)
  IF (Boost_UNIT_TEST_FRAMEWORK_FOUND)
    SET(HAVE_UNITTESTFRAMEWORK 1 CACHE INTERNAL "" FORCE)
  ENDIF (Boost_UNIT_TEST_FRAMEWORK_FOUND)
ENDIF (WITH_TEST)

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h VLE_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h VLE_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h VLE_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${VLE_BINARY_DIR})

#
 # Generate the vle.pc pkg-config file.
 # Build some variable to build a correct Win32 pkg config file with:
 # prefix=/target to detect the DIRNAME
 # cflag=-Iboost_1_34_1 for the directory
#

IF(UNIX)
  SET(VLE_PKGCONFIG_PREFIXPATH "${CMAKE_INSTALL_PREFIX}")
  SET(VLE_PKGCONFIG_BOOSTINCLUDE_DIRS "${Boost_INCLUDE_DIRS}")
  SET(VLE_PKGCONFIG_LIBDIR "lib")
ELSE(UNIX)
  SET(VLE_PKGCONFIG_PREFIXPATH "/target")
  SET(VLE_PKGCONFIG_BOOSTINCLUDE_DIRS "\${includedir}")
  SET(VLE_PKGCONFIG_LIBDIR "bin")
ENDIF(UNIX)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/vle/vle.pc.in
  ${VLE_BINARY_DIR}/vle-${VLE_VERSION_SHORT}.pc @ONLY)
INSTALL(FILES ${VLE_BINARY_DIR}/vle-${VLE_VERSION_SHORT}.pc DESTINATION
  lib/pkgconfig)

IF (HAVE_EOV)
  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/vle/eov.pc.in
    ${VLE_BINARY_DIR}/eov-${VLE_VERSION_SHORT}.pc @ONLY)
  INSTALL(FILES ${VLE_BINARY_DIR}/eov-${VLE_VERSION_SHORT}.pc DESTINATION
    lib/pkgconfig)
ENDIF (HAVE_EOV)

IF (HAVE_GVLE)
  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/vle/gvle.pc.in
    ${VLE_BINARY_DIR}/gvle-${VLE_VERSION_SHORT}.pc @ONLY)
  INSTALL(FILES ${VLE_BINARY_DIR}/gvle-${VLE_VERSION_SHORT}.pc DESTINATION
    lib/pkgconfig)
ENDIF (HAVE_GVLE)

#
 # Install the README
#

IF(UNIX)
  INSTALL(FILES "README" DESTINATION "${VLE_SHARE_DIRS}")
  INSTALL(FILES "COPYING" DESTINATION "${VLE_SHARE_DIRS}")
ELSE(UNIX)
  INSTALL(FILES "README" DESTINATION "${VLE_SHARE_DIRS}" RENAME "Readme.txt")
  INSTALL(FILES "COPYING" DESTINATION "${VLE_SHARE_DIRS}" RENAME "CopyRight.txt")
ENDIF(UNIX)

#
 # Browse the share subdirectory
#

ADD_SUBDIRECTORY(share)

#
 # Gettext utilities
#

FIND_PACKAGE(Gettext)
IF (GETTEXT_FOUND)
  SET(VLE_HAVE_NLS 1 CACHE INTERNAL "" FORCE)
  ADD_SUBDIRECTORY(i18n)
ELSE (GETTEXT_FOUND)
  SET(VLE_HAVE_NLS 0 CACHE INTERNAL "" FORCE)
ENDIF (GETTEXT_FOUND)

#
 # Generating documentation with doxygen
#

OPTION(WITH_DOXYGEN "build the documentation with doxygen [default: off]" OFF)
IF (WITH_DOXYGEN)
  FIND_PACKAGE(Doxygen)
  IF (DOXYGEN)
    ADD_SUBDIRECTORY(doxygen)
  ELSE (DOXYGEN)
    MESSAGE(STATUS "WARNING: Doxygen not found - No reference manual create")
  ENDIF (DOXYGEN)
ENDIF(WITH_DOXYGEN)

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${VLE_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (VLE_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (VLE_HAVE_GCC_ABI_DEMANGLE)
IF (VLE_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (VLE_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
IF (HAVE_UNITTESTFRAMEWORK)
  MESSAGE(STATUS "Build unit test...............: yes")
ENDIF (HAVE_UNITTESTFRAMEWORK)
IF (HAVE_EOV)
  MESSAGE(STATUS "Build with eov................: yes")
ENDIF (HAVE_EOV)
IF (VLE_HAVE_CAIRO)
  MESSAGE(STATUS "Build with cairo plugin.......: yes")
ENDIF (VLE_HAVE_CAIRO)
IF (HAVE_GVLE)
  MESSAGE(STATUS "Build with gvle...............: yes")
ENDIF (HAVE_GVLE)
IF (VLE_HAVE_POOL)
  MESSAGE(STATUS "Build with boost::pool........: yes")
ENDIF (VLE_HAVE_POOL)
MESSAGE(STATUS "- - - -")

# vim:tw=0:ts=8:tw=0:sw=2:sts=2
